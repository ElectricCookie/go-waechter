// Code generated by go-bindata.
// sources:
// templates/confirm-de.html
// templates/confirm-en.html
// templates/confirm.html
// templates/forgot-password-de.html
// templates/forgot-password-en.html
// templates/forgot-password.html
// templates/password-changed-de.html
// templates/password-changed-en.html
// templates/password-changed.html
// templates/test-email-template.html
// DO NOT EDIT!

package waechter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesConfirmDeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xbb\x6e\x1b\x31\x10\x45\x7b\x7d\xc5\x85\x6b\x59\xbf\x10\x38\x8f\x22\xc8\xa3\x48\x10\xa8\xe6\x72\x2f\x77\x07\x24\x87\xc1\x70\xd6\x40\xb4\xd0\x6f\xa5\x72\xa7\x1f\x0b\x24\x2b\x80\x13\xc1\x3d\xe7\xdc\xc3\xb3\xae\x18\x99\x44\x89\x3b\x17\x2f\xbc\x8f\x4d\x93\x58\xbd\xc3\xf1\xb8\x01\x80\xbd\x94\x92\x5b\xad\x54\xac\x2b\x76\x3f\x3a\x4d\x43\x25\x8e\xc7\xed\x66\x5d\x41\x1d\xcf\x2f\x37\x2f\x38\xc3\xe2\xde\xf4\x06\xf4\xe1\xfe\x4b\x90\x82\x47\x9a\x24\x39\x08\x8d\xfa\x0a\x20\x36\x75\xaa\xdf\x10\xc6\xa0\x99\x48\xa7\x27\xc3\xc7\xd9\x88\x6f\x9c\xa4\xbb\x09\x6d\xd1\x09\x03\xe5\x62\xf8\xae\xd5\x9f\x41\x7f\xed\x39\x74\xf1\xb3\xe7\x0e\x6f\xc5\x9d\x48\xad\x4c\x54\x7c\x17\x62\x64\xc5\x72\x1e\x41\x77\xce\xd4\x91\x8a\xcf\xa2\x79\x8b\xa5\x9e\xd9\xf8\xd4\xd4\x1b\x92\x51\x0e\x4b\x8f\x73\x28\x4e\xdd\xbd\xa2\x9b\x5a\x73\xda\x8d\xed\x57\x89\xb3\xff\xdf\xec\x0d\xf6\xd4\xab\x83\xb0\xf3\x6f\x15\x31\xf3\xd3\x53\x2d\x12\x67\xd0\x9e\xf7\x30\x87\x81\xba\x45\x3e\xfd\x56\xe5\xcb\x23\x8a\xa6\x10\x67\xc8\xa4\xcd\x2e\x25\x77\x78\x4f\x03\xad\x3b\x4b\x71\xe2\x21\xc6\xb6\xa8\x43\xba\x43\x2f\x22\x03\x75\xf1\xc3\x10\x6c\x8b\xde\x4a\xd0\x89\xd7\x12\x8a\x87\xec\xf2\xf8\x5c\xb1\x17\xd1\x7c\xbd\x08\x9a\x8b\xc4\xfc\xcf\xc7\xff\x04\x00\x00\xff\xff\x15\x32\xe8\x0f\x2f\x02\x00\x00")

func templatesConfirmDeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesConfirmDeHtml,
		"templates/confirm-de.html",
	)
}

func templatesConfirmDeHtml() (*asset, error) {
	bytes, err := templatesConfirmDeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/confirm-de.html", size: 559, mode: os.FileMode(420), modTime: time.Unix(1500150766, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConfirmEnHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x3d\x6b\x33\x31\x10\x84\x7b\xff\x8a\x79\xfd\x42\xaa\xc4\x4d\x9a\x40\x8a\x14\x81\x40\x1a\x57\xf9\xa8\x75\xa7\x95\x6f\xb1\xb4\x6b\xa4\xbd\x98\x43\xe8\xbf\x07\x9f\x43\xb8\xe0\xa4\x5c\x98\x79\x78\x66\x6b\x85\xa7\xc0\x42\x58\x1b\x5b\xa4\x9b\x5e\x25\x70\x4e\x6b\xb4\xb6\x02\x80\x77\x8a\xbd\x26\x42\xad\xd8\xbc\x16\xca\xe2\x12\xb5\x76\xbd\xaa\x15\x24\xfe\x94\x5a\x2d\x18\xdd\x68\xa6\x72\x01\x79\xa3\xcc\x61\x02\x25\xc7\x71\xd9\x5c\x56\x7b\x15\x23\xb1\x8b\xae\x0d\x4e\xf6\x05\x41\x33\x32\xed\xb8\x18\x65\x96\x1d\x9c\xcd\x4a\x8f\x9a\x0e\x4e\xa6\xad\x4b\x84\xd6\xfe\xe1\x49\x63\xd4\x23\x6c\x20\x44\x96\x3d\x3a\x9a\x4f\xc5\xc7\x59\x61\xd2\x31\x9f\x3d\xe0\xbc\xcf\x54\xca\xe6\x8f\x29\x41\xd5\x28\x5f\xe8\x6c\xd5\x7e\xfc\x02\xad\x3d\xe0\x39\x9c\xc0\xf0\xec\xe5\xea\xff\xed\xdd\xfd\xb7\xe9\xef\x9a\x73\xb8\x77\x82\xc2\xe9\x10\x27\xf0\x4e\x34\x13\x6c\xe0\x72\x76\xdb\xe0\x65\x20\xb8\xbe\xd7\x51\x0c\x47\x8e\x11\xa2\x86\x8e\x30\x16\xd7\x45\xc2\x28\x91\x4a\x99\x39\x5f\xc3\xd8\x16\x43\x3e\x03\x00\x00\xff\xff\xe7\x53\x7a\x98\xd6\x01\x00\x00")

func templatesConfirmEnHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesConfirmEnHtml,
		"templates/confirm-en.html",
	)
}

func templatesConfirmEnHtml() (*asset, error) {
	bytes, err := templatesConfirmEnHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/confirm-en.html", size: 470, mode: os.FileMode(420), modTime: time.Unix(1500150792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConfirmHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xeb\x8e\x1b\xb7\x15\xfe\xbf\x4f\x71\x96\x46\x81\xa4\x58\x6a\x46\xeb\xc4\xc9\xce\x45\xb5\xeb\xba\x8d\x81\xb4\x35\xd2\x18\x28\x10\x18\x05\x35\x3c\x23\x31\xcb\x21\xa7\x24\x75\xd9\xaa\xfb\x2e\x7d\x96\x3e\x59\x41\x72\x46\x1a\xdd\x36\xb6\xe3\x2d\xf2\x23\xfb\x43\x12\x2f\x73\x2e\xdf\xf9\xf8\x1d\xce\x16\x97\x5c\x57\xee\xae\x45\x98\xbb\x46\x4e\x2e\x0a\xff\x05\xeb\x46\x2a\x5b\x92\xb9\x73\x6d\x96\x24\xab\xd5\x6a\xb4\x7a\x3a\xd2\x66\x96\x8c\x6f\x6e\x6e\x92\xb5\xdf\x43\xe2\xa6\x6c\x59\x92\x85\x51\x99\xad\xe6\xd8\x30\x4b\x1b\x51\x19\x6d\x75\xed\x68\xa5\x9b\x6c\xb9\xdb\xa7\x1f\xda\xa7\xeb\x5a\x54\xd8\x7d\x11\x1f\x05\x32\x3e\xb9\x00\x28\x9c\x70\x12\x27\x45\x12\xbf\xfd\xcc\x25\xa5\x3f\x88\x1a\x2e\x1b\xab\xdf\x4d\xfc\x08\x28\x0d\x0b\x0d\x3a\x06\x3e\x64\x8a\xff\x5c\x88\x65\x49\xfe\x4e\xdf\xbe\xa0\x2f\x75\xd3\x32\x27\xa6\x12\x09\x54\x5a\x39\x54\xae\x24\xaf\x5f\x95\xc8\x67\xde\x53\x34\x58\x5c\xfe\x80\x8a\x8b\xfa\x9d\x37\x75\x6c\xe8\x65\x7c\x8e\x7e\x7f\xd7\x0e\xad\x38\x5c\xbb\xc4\x63\x91\x43\x35\x67\xc6\xa2\x2b\xdf\x7e\xff\x47\xfa\x35\xe9\x6d\x28\xd6\x60\x49\x96\x02\x57\xad\x36\x6e\xf0\xe4\x4a\x70\x37\x2f\x39\x2e\x45\x85\x34\x0c\xae\x40\x28\xe1\x04\x93\xd4\x56\x4c\x62\x39\x1e\xa5\xde\x8c\x75\x77\x12\xc1\xd7\xa7\x73\x57\x59\x1b\xa2\x7e\xa2\x17\x4e\x6a\x7d\x0b\x0c\x36\xd0\x32\xce\x85\x9a\x65\x90\xe6\x70\x7f\x01\x30\xfa\x0e\x19\xff\xb3\x9d\xfd\x5e\xf3\x3b\xd8\x40\x70\x90\xc1\x38\x4d\x7f\xd3\xad\xbf\x5a\x3b\x34\x8a\xc9\x97\x92\x59\xfb\x1e\x3b\x7e\x0b\x1b\x90\x42\x21\x9d\xa3\x98\xcd\x5d\xb6\xdb\x38\x8d\x2e\x1a\x66\x66\x42\x85\x00\x86\xc1\xd0\x15\x4e\x6f\x85\xa3\x3e\x74\x6a\xc5\xbf\x90\x32\xfe\xe3\xc2\xba\xde\x15\x6d\xec\xd9\x35\x6f\xdd\xb1\xa9\xc4\x2b\x70\x1c\x36\x30\xd5\x86\xa3\xa1\x95\x96\x92\xb5\x16\xb3\xfe\x47\x0e\x8d\xd5\x34\xec\xa4\xd2\xb6\xac\xc2\x0c\xd2\xd6\x0d\xa7\xcd\x70\xda\xdb\x15\xcd\x6c\x6b\x31\x04\xda\xe5\x05\x6c\xe1\x74\xbe\x97\x6a\x17\x8d\x87\x5b\x28\xcc\x40\x69\x85\x39\x84\xa0\x39\x56\xda\x30\x27\xb4\xea\xa7\x7d\x3e\x42\x39\x34\xad\x96\x61\x81\x36\x9a\x63\x06\x53\x51\x2d\xa6\xa2\x8a\xce\x5b\xd8\x00\x17\xb6\x95\xec\x2e\x83\xa9\xd4\xd5\x6d\xbe\xc5\x6f\xfc\xb4\x5d\xc7\x2a\x16\x49\xa8\xfd\xe4\xe2\x98\xf0\x0f\xf1\xe2\x79\x83\x5c\x30\xd0\x4a\xde\x81\xad\x0c\xa2\x02\xa6\x38\x7c\xd6\xb0\x75\x24\x5a\xf6\xc5\xd7\x69\xbb\xfe\x1c\x36\x17\x00\x00\xcf\x7d\xc4\x3d\x41\xb7\x44\x78\x7a\x9d\xb6\xeb\x18\x2c\xc0\xf3\x87\x96\x0f\xe2\xdc\x3f\x47\x5d\xe0\x21\xee\x8b\x62\xed\xe5\x05\xa0\xd0\xd9\x5f\xc3\x31\xff\x83\xae\x16\x0d\x2a\xf7\x37\x74\x4e\xa8\x99\x9d\x04\x6f\x85\xce\x5e\x48\xa9\x57\x6f\xfe\xf2\xa7\x64\x3b\xf3\x46\xac\x51\xda\x37\x68\x5e\xab\x6a\x3e\xb9\x79\x56\x24\x87\x73\xde\x70\x72\xde\x72\x91\x04\xef\x27\xc3\x93\x0e\x7d\x88\x30\x1e\xbf\x7b\x08\xd8\x51\x77\xe0\xe8\xcc\xe8\x45\x4b\x6b\xb1\xee\x20\x8c\x98\x78\x96\xc0\xa5\x68\x3c\x50\x4c\xb9\xfc\x10\x9b\x81\xe3\x93\x15\x0d\x99\x4a\xa1\x6e\x61\x6e\xb0\x8e\xd2\x6b\xb3\x24\xa9\xb5\x72\x76\x34\xd3\x7a\x26\x91\xb5\xc2\x8e\x2a\xdd\xf8\x98\x7e\x57\xb3\x46\xc8\xbb\xf2\xed\x74\xa1\xdc\x22\x7b\x9a\xa6\x57\x5f\xa4\xe9\xd5\x97\x69\x7a\xf5\x55\x9a\x12\x30\x28\x4b\x12\xbc\xdb\x39\xa2\x23\xa7\x52\x02\x38\x97\x6e\x58\x0c\xc5\x8f\x19\xc1\xc2\xc8\xcf\x7e\x5e\x48\x9f\xe7\xd1\xea\x16\x93\x63\xe5\xfd\x08\x56\x0b\x75\x8a\xd5\xa3\xe6\x47\xaf\x13\x8b\x46\xd1\x16\x0d\x1d\xa7\xe9\x96\xbb\xbe\x4e\x83\x32\x1d\x91\x38\x89\x9d\xa7\x08\xba\x16\x26\x4b\x32\x65\xd5\xad\xaf\xba\xe2\x19\x3c\xa9\xeb\x3a\x8f\x7d\x83\x8b\xe5\xf1\x0e\xef\x57\x9b\xac\xdb\x36\x38\x02\xf0\x6f\x78\xfd\xea\xdd\xa4\x43\xb6\x08\xc2\x04\x46\xfb\xa7\x5b\x83\x16\x95\x0b\x82\x41\x3a\x55\x2a\x49\x4a\xa0\x42\x29\x3b\x39\xdd\x8e\xbd\x94\xf5\xe3\xd8\x46\xc8\x33\x5f\x70\x26\xc5\x4c\x95\xa4\x42\x2f\x3f\xa4\x0f\x2c\x26\xfd\x2c\xf5\x07\x96\x4c\xb6\x65\x2d\x9c\xd9\x0d\xfc\x90\xf7\x0f\x0c\xa5\xcf\x3f\xe4\x8b\x1d\xd4\x39\x8c\xbc\xa4\x0e\x76\x50\xb3\x90\x98\xe1\x9a\x55\x4e\xde\xed\xec\xef\xd5\x74\x80\x52\x27\x72\x69\xbb\x8e\x3a\xbb\xd3\xa4\x3e\xc0\x07\x60\xf9\x29\x2c\x3a\x1f\xfb\xf1\xee\x6a\x9e\x1f\x21\xb4\xc3\x79\x52\x38\x5f\xee\x89\x47\x65\x00\x45\xd0\xf8\xf0\x50\x16\x9f\xc9\x97\x68\x9c\xa8\x98\xec\x66\x9d\x6e\x73\x2e\x0c\x56\xa1\x05\x48\x67\x0e\xd0\xea\x3b\xa1\x97\x4b\xe8\x12\x7c\x54\x42\x1c\x66\x70\x22\xde\x93\x84\x38\x2a\x58\xe5\xbb\x7e\x49\x8e\x8f\xd1\x91\x08\x92\x07\x7c\xf5\x4d\x4e\xa8\xc0\x99\xd8\xea\xce\x01\xe6\x3b\x5f\x3e\x80\x5c\x62\xed\xf6\xea\xf7\x73\xc8\xd1\x1d\x14\x6f\xe8\x3d\x0a\xbf\xd2\x86\xd3\x95\x61\x6d\x36\x35\xc8\x6e\xa9\x1f\x9f\x29\xed\xd8\x97\xf6\xfa\x4b\x0f\xe6\x01\xbf\x3e\x01\x97\xcf\xde\x78\xba\x85\xee\x91\x10\xd0\x87\xd3\xbb\xc3\xf6\xba\x23\xa6\xbf\x12\x31\xe9\x4a\x42\x20\xdc\xb5\xfd\x8f\x78\xca\x4b\xe2\x4f\x2b\x01\x6b\xaa\x92\x6c\x36\x30\xfa\x56\xcf\xf4\xdb\xef\xbe\x85\xfb\xfb\x83\x50\xb3\x70\x0b\xea\xa2\x33\x8c\x8b\x85\x0d\xc1\xf5\x44\x88\x0c\xe8\xaf\x52\x61\xf3\xe1\x45\x2a\x4c\x0e\xca\xde\x49\x51\xd0\x8b\x5d\x1d\xaf\x7d\x56\x89\xe3\xfe\xc3\xf8\x8f\x98\x60\x12\x20\x1f\xae\x7c\x8a\xc2\x4e\x8a\xf6\x58\x5d\xc6\x5e\x0d\x0f\xf4\xac\x4b\xdc\xe9\xd6\x2f\x83\xd5\x52\x70\x78\xc2\x39\x3f\xe0\x71\xd2\x9e\xd0\x81\x07\xe8\x72\xb6\xb2\x1f\x2e\x8a\x1f\x1f\xf6\xb0\xd9\x1c\xe2\xda\xf7\x8b\x7c\xaf\x7b\xe4\x64\xf2\xdf\xff\xec\x55\x29\x56\x67\x28\x36\x9f\xb6\x52\x3d\x52\x5e\x3b\xc8\x9e\x92\x6d\xa1\xa8\x16\xc6\x6a\x13\xf9\xd4\xb5\x6a\xc6\x58\x34\x1d\xef\x2f\xd9\x1c\xe5\x12\xbd\x96\x0d\x1c\x86\x53\x32\xcc\xee\xfa\xfa\x84\x5c\x91\xc9\x66\x03\xe0\xb0\x69\x25\x73\x08\x24\x1c\x24\x5a\x69\x55\x0b\xd3\x10\x18\xc1\xfd\x7d\x91\x70\xb1\xfc\x65\xe4\x9d\x86\xbf\xbd\xd4\xe3\xd5\xed\x0a\xbe\xe9\x21\xb8\x82\x17\x46\x30\x79\x05\x96\x29\x4b\x2d\x1a\x51\x0f\x35\xfb\xfa\xbd\x51\xd9\x81\xd2\xbd\x04\xff\x1f\x61\x79\x3c\x45\xb6\xd8\x32\xc3\x1c\x7e\x84\xfc\x9e\x57\x4c\xdf\x08\x63\x89\x56\x73\xe1\x30\x1f\x96\xee\xa7\xb3\x84\x65\x37\x6e\x04\xe7\x12\x09\x4c\x67\xc1\x58\x49\x9e\x8c\x6f\xd8\xf8\xe6\x2b\x32\x29\x58\xf7\x92\xe1\xc5\xfc\x65\x2c\xc3\x0b\xce\x0d\x5a\x3b\xd4\xf4\x93\xd2\x7c\xf4\x5f\x80\xc1\xe5\xb8\x73\xb0\x17\xfc\x90\x5d\xdf\x9c\x38\x58\xa1\xed\x87\xe1\x2a\x1a\x55\xda\x34\x4c\x46\x12\x39\xc3\x94\xad\xb5\x69\xa2\xef\x9d\x70\xe5\x04\x1c\x33\x33\x74\x25\xf9\xc7\x54\x32\x75\x7b\xc0\xb1\xe9\xc2\x39\xad\x0e\x29\xc6\x7e\xed\x19\xbf\xf6\x8c\xc7\xe9\x19\x1f\x2a\x9c\xef\xdf\x4e\x76\xa4\xae\xb5\x76\x41\x7c\x1e\xd2\xcd\x23\x5a\x87\xf5\xb3\x6f\x1d\x47\x48\x9f\x7a\x23\x78\x64\xeb\xde\xc6\x45\x91\x04\xcb\xfe\x05\xdc\x35\x72\xf2\xbf\x00\x00\x00\xff\xff\x12\xbf\xd2\x38\x97\x16\x00\x00")

func templatesConfirmHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesConfirmHtml,
		"templates/confirm.html",
	)
}

func templatesConfirmHtml() (*asset, error) {
	bytes, err := templatesConfirmHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/confirm.html", size: 5783, mode: os.FileMode(420), modTime: time.Unix(1500150872, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesForgotPasswordDeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcd\x6a\xeb\x30\x10\x46\xf7\x79\x8a\x8f\x2c\xbc\xca\xf5\x0b\xdc\x55\xa1\x29\x14\x5a\x28\xa4\xab\xee\x94\xe8\xb3\x2d\x6c\x8f\x40\x1a\x91\x62\xe1\x77\x2f\x72\x9b\xc4\x59\x64\xa9\x1f\xce\x9c\x39\x39\xc3\xb2\x71\x42\x6c\x4f\x5e\x94\xa2\x5b\xcc\xf3\x06\x00\x0e\x8e\xe8\xcc\x91\x02\x96\xf7\xfd\xbf\x77\xe3\x06\x4c\x29\xe0\x2b\x85\x2a\xa5\x71\xf8\x7f\xea\x23\x75\x4a\xd2\xe2\xb5\x0b\x8c\xf8\x30\x31\x9e\x7d\xd0\x08\x23\x2d\x1b\x1f\x2c\x83\xd6\x78\xf1\x43\x4b\x59\x80\x96\x23\x52\x99\x83\xa8\xec\x28\xe5\xfc\xe6\xa4\xdf\x21\x8d\x05\x72\x45\x60\x4a\xa8\x4c\x19\x22\x96\x41\xea\x4d\xce\xa0\xd8\x22\xb7\x59\x49\x1f\x93\xaa\x97\x4f\x7e\xdf\xbc\x57\x84\x3b\x4d\xca\x03\x46\xe3\xbd\x32\xdc\x31\x9e\x1d\xe3\x75\xe5\x73\x0a\x96\x30\x82\x9c\x51\xef\xc7\x72\x35\xcf\x68\x19\x8b\xbe\xd6\x38\xf8\x61\xd0\xbf\xfd\xfa\xa5\x55\xf5\x74\x11\x2f\x6d\xec\x83\x32\xbf\x75\x77\xe8\x2b\xbf\x7c\x97\x4b\xa3\xf5\x70\xd7\x8a\x0f\x8e\x81\x52\xe3\xe6\xff\x13\x00\x00\xff\xff\x5e\xd1\xb2\x4b\xb7\x01\x00\x00")

func templatesForgotPasswordDeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesForgotPasswordDeHtml,
		"templates/forgot-password-de.html",
	)
}

func templatesForgotPasswordDeHtml() (*asset, error) {
	bytes, err := templatesForgotPasswordDeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/forgot-password-de.html", size: 439, mode: os.FileMode(420), modTime: time.Unix(1497044570, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesForgotPasswordEnHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\x31\x4f\xc4\x30\x0c\x85\xf7\xfb\x15\x4f\x87\xc4\x84\xba\x30\x01\x33\x03\x2b\xba\x85\x31\xd7\xb8\xad\x45\x6a\x1f\xb1\xa3\x52\x45\xfd\xef\xa8\x15\xea\x71\x03\x5b\x62\xfb\xe9\x7d\x5f\xad\x88\xd4\xb1\x10\x8e\xad\x8a\x93\xf8\x11\xcb\x72\x00\x80\x0f\x2d\x70\x4d\x11\xc5\x30\x6b\x41\xa7\xb9\x57\x5f\x9f\x19\x97\x60\x36\x69\x8e\x0d\xde\xba\x6d\x99\x29\xa4\x34\x23\x72\xdc\xbe\x6d\x10\xb4\x43\x90\x9e\xc0\x8e\x62\x2c\x3d\x7c\x20\x24\x96\x4f\x9c\x29\xe9\xf4\x7c\xa8\x15\x24\x71\x6d\x3b\xfc\xa1\x38\x17\x77\x95\x13\x7d\x5f\x41\xde\xc9\x5c\x33\x61\x9c\xf7\xde\x7f\xc2\x9d\xaa\x53\xbe\x09\x9f\x06\x36\xd0\x18\x38\x61\x0a\x06\x23\x71\xb8\xa2\x56\x34\xaf\xdb\x74\x59\x76\x89\xc8\x51\xee\xef\x1e\x9f\x5e\x1c\x99\xbe\x0a\xd9\x76\xfa\xeb\x71\xe3\xfd\xb0\x5b\x1a\x8f\x97\x34\x83\x7b\x59\x11\x7d\x6d\x1b\xc9\x2c\xf4\xd4\x5c\x21\x7f\x02\x00\x00\xff\xff\xf1\x98\x7e\xcf\x66\x01\x00\x00")

func templatesForgotPasswordEnHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesForgotPasswordEnHtml,
		"templates/forgot-password-en.html",
	)
}

func templatesForgotPasswordEnHtml() (*asset, error) {
	bytes, err := templatesForgotPasswordEnHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/forgot-password-en.html", size: 358, mode: os.FileMode(420), modTime: time.Unix(1497044523, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesForgotPasswordHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xd9\x6e\x23\xb9\x15\x7d\xf7\x57\x5c\xb3\x11\x60\x26\x50\xa9\x4a\xf6\x4c\xcf\xb8\x16\xa5\x3b\x9d\x4e\xd2\x40\x96\x46\xd2\x06\x02\x0c\xfc\x40\x15\x6f\x49\x1c\xb3\xc8\x0a\xc9\xd2\x12\xc5\xff\x92\x6f\xc9\x97\x0d\x48\x96\xa4\xd2\xe6\x99\x71\xdb\x6f\xed\x07\x4b\xdc\xee\x76\x0e\xcf\xa5\xf2\x4b\xa6\x4a\xbb\x6a\x10\x66\xb6\x16\xe3\x8b\xdc\x7d\xc0\xb2\x16\xd2\x14\x64\x66\x6d\x93\xc6\xf1\x62\xb1\x18\x2e\xae\x87\x4a\x4f\xe3\xd1\xcd\xcd\x4d\xbc\x74\x7b\x48\xd8\x94\xce\x0b\xd2\x6a\x99\x9a\x72\x86\x35\x35\x51\xcd\x4b\xad\x8c\xaa\x6c\x54\xaa\x3a\x9d\xef\xf6\xa9\xc7\xf6\xa9\xaa\xe2\x25\x76\x1f\xc4\x45\x81\x94\x8d\x2f\x00\x72\xcb\xad\xc0\x71\x1e\x87\x4f\x37\x73\x19\x45\x3f\xf0\x0a\x2e\x6b\xa3\xee\xc6\x6e\x04\x51\xe4\x17\x6a\xb4\x14\x5c\xc8\x11\xfe\xbb\xe5\xf3\x82\xfc\x2b\xba\x7d\x1b\xbd\x53\x75\x43\x2d\x9f\x08\x24\x50\x2a\x69\x51\xda\x82\x7c\x78\x5f\x20\x9b\x3a\x4f\xc1\x60\x7e\xf9\x03\x4a\xc6\xab\x3b\x67\xea\xd8\xd0\xbb\x70\x2e\xfa\xb4\x6a\xfa\x56\x2c\x2e\x6d\xec\x6a\x91\x41\x39\xa3\xda\xa0\x2d\x6e\x3f\xfd\x31\xfa\x9e\x6c\x6c\x48\x5a\x63\x41\xe6\x1c\x17\x8d\xd2\xb6\x77\x72\xc1\x99\x9d\x15\x0c\xe7\xbc\xc4\xc8\x0f\x06\xc0\x25\xb7\x9c\x8a\xc8\x94\x54\x60\x31\x1a\x26\xce\x8c\xb1\x2b\x81\xe0\xf0\xe9\xdc\x95\xc6\xf8\xa8\x5f\xa9\xd6\x0a\xa5\xee\x81\xc2\x1a\x1a\xca\x18\x97\xd3\x14\x92\x0c\x1e\x2e\x00\x86\xff\x40\xca\xfe\x6a\xa6\xbf\x57\x6c\x05\x6b\xf0\x0e\x52\x18\x25\xc9\x6f\xba\xf5\xf7\x4b\x8b\x5a\x52\xf1\x4e\x50\x63\x7e\xc1\x8e\xdf\xc2\x1a\x04\x97\x18\xcd\x90\x4f\x67\x36\xdd\x6d\x9c\x04\x17\x35\xd5\x53\x2e\x7d\x00\xfd\x60\xa2\x05\x4e\xee\xb9\x8d\x5c\xe8\x91\xe1\xff\xc1\x88\xb2\x1f\x5b\x63\x37\xae\xa2\xda\x9c\x5d\x73\xd6\x2d\x9d\x08\x1c\x80\x65\xb0\x86\x89\xd2\x0c\x75\x54\x2a\x21\x68\x63\x30\xdd\x7c\xc9\xa0\x36\x2a\xf2\x3b\x23\x61\x1a\x5a\x62\x0a\x49\x63\xfb\xd3\xba\x3f\xed\xec\xf2\x7a\xba\xb5\xe8\x03\xed\xf2\x02\xda\x5a\x95\xed\xa5\xda\x45\xe3\xca\xcd\x25\xa6\x20\x95\xc4\x0c\x7c\xd0\x0c\x4b\xa5\xa9\xe5\x4a\x6e\xa6\x5d\x3e\x5c\x5a\xd4\x8d\x12\x7e\x21\xaa\x15\xc3\x14\x26\xbc\x6c\x27\xbc\x0c\xce\x1b\x58\x03\xe3\xa6\x11\x74\x95\xc2\x44\xa8\xf2\x3e\xdb\xd6\x6f\x74\xdd\x2c\x03\x8a\x79\xec\xb1\x1f\x5f\x1c\x13\xfe\x31\x5e\xbc\xa9\x91\x71\x0a\x4a\x8a\x15\x98\x52\x23\x4a\xa0\x92\xc1\x57\x35\x5d\x06\xa2\xa5\xdf\x7c\x9f\x34\xcb\xaf\x61\x7d\x01\x00\xf0\xc6\x45\xbc\x21\xe8\x96\x08\xd7\x57\x49\xb3\x0c\xc1\x02\xbc\x79\x6c\xf9\x20\xce\xfd\x7b\xd4\x05\xee\xe3\xbe\xc8\x97\x4e\x5e\x00\x72\x95\xfe\xdd\x5f\xf3\x3f\xa8\xb2\xad\x51\xda\x7f\xa2\xb5\x5c\x4e\xcd\xd8\x7b\xcb\x55\xfa\x56\x08\xb5\xf8\xf8\xb7\x3f\xc5\xdb\x99\x8f\x7c\x89\xc2\x7c\x44\xfd\x41\x96\xb3\xf1\xcd\xeb\x3c\x3e\x9c\x73\x86\xe3\xf3\x96\xf3\xd8\x7b\x3f\x19\x9e\xb0\xe8\x42\x84\xd1\xe8\xee\xb1\xc2\x0e\xbb\x0b\x17\x4d\xb5\x6a\x9b\xa8\xe2\xcb\xae\x84\xa1\x26\x8e\x25\x70\xc9\x6b\x57\x28\x2a\x6d\x76\x58\x9b\x9e\xe3\x93\x88\xfa\x4c\x05\x97\xf7\x30\xd3\x58\x05\xe9\x35\x69\x1c\x57\x4a\x5a\x33\x9c\x2a\x35\x15\x48\x1b\x6e\x86\xa5\xaa\x5d\x4c\xbf\xab\x68\xcd\xc5\xaa\xb8\x9d\xb4\xd2\xb6\xe9\x75\x92\x0c\xbe\x49\x92\xc1\xb7\x49\x32\xf8\x2e\x49\x08\x68\x14\x05\xf1\xde\xcd\x0c\xd1\x92\x53\x29\x01\x9c\x4b\xd7\x2f\x7a\xf0\x43\x46\xd0\x6a\xf1\xd5\xe7\x85\xf4\x75\x16\xac\x6e\x6b\x72\xac\xbc\x4f\x60\x35\x97\xa7\x58\x3d\xac\x7f\x74\x3a\xd1\xd6\x32\x6a\x50\x47\xa3\x24\xd9\x72\xd7\xe1\xd4\x83\xe9\x88\xc4\x71\xe8\x3c\xb9\xd7\x35\x3f\x59\x90\x09\x2d\xef\x1d\xea\x92\xa5\xf0\xaa\xaa\xaa\x2c\xf4\x0d\xc6\xe7\xc7\x3b\x9c\x5f\xa5\xd3\x6e\x5b\xef\x0a\xc0\x7f\xe1\xc3\xfb\xbb\x71\x57\xd9\xdc\x0b\x13\x68\xe5\x4e\x37\x1a\x0d\x4a\xeb\x05\x83\x74\xaa\x54\x90\x84\x40\x89\x42\x74\x72\xba\x1d\x3b\x29\xdb\x8c\x43\x1b\x21\xaf\x1d\xe0\x54\xf0\xa9\x2c\x48\x89\x4e\x7e\xc8\x26\xb0\x90\xf4\xeb\xc4\x5d\x58\x32\xde\xc2\x9a\x5b\xbd\x1b\xb8\x21\xdb\x1c\xe8\x4b\x9f\x3b\xe4\xc0\xf6\xea\xec\x47\x4e\x52\x7b\x3b\x22\xdd\x0a\x4c\x71\x49\x4b\x2b\x56\x3b\xfb\x7b\x98\xf6\xaa\xd4\x89\x5c\xd2\x2c\x83\xce\xee\x34\x69\x13\xe0\x23\x65\xf9\xb9\x5a\x74\x3e\xf6\xe3\xdd\x61\x9e\x1d\x55\x68\x57\xe7\x71\x6e\x1d\xdc\x63\x57\x95\x5e\x29\xbc\xc6\xfb\x43\x69\x38\x93\xcd\x51\x5b\x5e\x52\xd1\xcd\x5a\xd5\x64\x8c\x6b\x2c\x7d\x0b\x10\x56\x1f\x54\x6b\xd3\x09\x9d\x5c\x42\x97\xe0\x8b\x12\xe2\x30\x83\x13\xf1\x9e\x24\xc4\x11\x60\xa5\xeb\xfa\x05\x39\xbe\x46\x47\x22\x48\x1e\xf1\xb5\x69\x72\x5c\x7a\xce\x84\x56\x77\xae\x60\xae\xf3\x65\xbd\x92\x0b\xac\xec\x1e\x7e\x9f\x43\x8e\xee\xa2\x38\x43\xbf\x00\xf8\x85\xd2\x2c\x5a\x68\xda\xa4\x13\x8d\xf4\x3e\x72\xe3\x33\xd0\x8e\x1c\xb4\x57\xdf\xba\x62\x1e\xf0\xeb\x19\xb8\x7c\xf6\xc5\xd3\x2d\x74\x47\x7c\x40\xbf\x9e\xde\x5d\x6d\xaf\x3a\x62\xba\x27\x11\x15\xb6\x20\x04\xfc\x5b\xdb\x7d\x09\xb7\xbc\x20\xee\xb6\x12\x30\xba\x2c\xc8\x7a\x0d\x43\xff\xa4\x96\xab\xbf\xa8\xa9\xba\xd5\x02\x1e\x1e\x0e\x22\x4e\xfd\x63\xa8\x0b\x52\x53\xc6\x5b\xe3\x63\xdc\xf0\x21\x10\x61\xf3\xa2\xf2\x9b\x0f\xdf\x53\x7e\xb2\x87\x7e\xa7\x48\x5e\x36\x76\x70\x5e\xb9\xe4\x62\xcb\xdc\x3f\xed\xfe\x85\x3c\x63\x5f\xf9\xfe\xca\x73\xe0\x3b\xce\x9b\x63\x91\x19\x39\x51\x3c\x90\xb5\x2e\x71\xab\x1a\xb7\x0c\x46\x09\xce\xe0\x15\x63\xec\x80\xce\x71\x73\x42\x0e\x1e\x61\xcd\x59\x80\x7f\xbd\x36\x3e\x3d\xec\x7e\xcf\x39\xac\xeb\xa6\x6d\x64\x7b\x4d\x24\x23\xe3\xff\xff\x6f\x0f\xa5\x80\x4e\x5f\x73\x9e\x17\xa9\x4d\xa5\x9c\x84\x90\x3d\x41\xdb\x96\xa2\x6c\xb5\x51\x3a\xf0\xa9\xeb\xd8\x89\xff\x0b\xd6\xc3\x4b\x26\x0d\x2f\x99\x01\xfc\x19\xc5\x1c\x9d\xba\x0d\xe0\xad\xe6\x54\x0c\xc0\x50\x69\x22\x83\x9a\x57\x7d\x09\xbb\x6a\x96\x7b\xb9\x5f\x5d\x9d\xd0\x34\x32\x5e\xaf\xc1\x62\xdd\x08\x6a\x11\x48\xf7\x9b\x90\xc0\xc3\x43\x1e\x33\x3e\x7f\xa9\x62\xbc\x9c\x2c\x19\x6c\xa8\xa6\x16\x9f\xa0\x41\xe7\xf5\xc2\x75\x83\x00\xcc\x62\xc6\x2d\x66\x7d\xc0\x7e\x3e\x4b\x98\x77\xe3\x9a\x33\xe6\x7e\xf9\x4f\xa6\xde\x58\x41\x5e\x8d\x6e\xe8\xe8\xe6\xbb\xfe\x6d\x3e\xa9\x3d\x47\xbf\x76\x7b\x8f\xc0\xce\xc6\x5e\x7c\x7d\xda\x6c\xe9\x72\xd8\xde\xfc\x70\x11\x8c\x4a\xa5\x6b\x2a\x02\x3b\xac\xa6\xd2\x54\x4a\xd7\xc1\xf7\xee\x66\x1e\x92\x65\xd2\x5a\xab\xe4\x27\x5c\x76\x7c\x69\xbe\xc8\xdf\x17\xf9\x7b\x1e\xf9\xa3\x94\x7e\x96\xf6\x25\x4f\xd0\xbe\x4a\x29\x8b\x7a\x47\xe7\x03\xf9\x3b\x22\xb4\x5f\x3f\xfb\x82\x3e\xaa\xf1\xa9\xd7\xed\x0b\x5b\x77\x36\x2e\xf2\xd8\x5b\x76\x3f\x26\x6d\x2d\xc6\x3f\x05\x00\x00\xff\xff\x77\x33\xb8\xee\x63\x15\x00\x00")

func templatesForgotPasswordHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesForgotPasswordHtml,
		"templates/forgot-password.html",
	)
}

func templatesForgotPasswordHtml() (*asset, error) {
	bytes, err := templatesForgotPasswordHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/forgot-password.html", size: 5475, mode: os.FileMode(420), modTime: time.Unix(1500150872, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPasswordChangedDeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x31\x4e\xc4\x30\x14\x44\xfb\x9c\x62\xd8\x22\x15\xd9\x0b\x50\x21\x44\x81\x10\x08\x89\x02\x89\xce\x89\x27\x8e\xa5\xf8\x3b\x72\xbe\x59\x81\x95\xdb\x70\x13\x2e\x86\xac\x08\x41\x41\xb1\xdd\x2f\xfe\xcc\xbc\x57\x0a\x2c\x47\x2f\xc4\x41\xbd\xce\xec\x16\xb3\xae\xa7\x98\x6c\x37\x4c\x46\x1c\xed\x01\xdb\xd6\x3c\x7b\x62\x32\x3d\x05\x77\x53\xc2\xd3\xfe\xa2\xe8\xe9\x51\x0a\x8e\x37\x31\x2c\x46\xde\x1f\x4d\x20\xb6\x0d\x8e\x5f\x9f\x62\x99\xf4\xa2\x29\x05\x14\x5b\x2b\x9a\x3f\x4b\x43\x14\xa5\xe8\xff\x5b\x2f\x14\x41\x1d\xb4\x9e\x2b\xd1\x5e\xe7\x30\x5f\xd5\xba\x2c\x0e\xe2\x87\x49\xf1\x16\x93\xa3\xc4\x10\x28\x3b\xd6\x25\xd6\x38\xcf\xca\x3d\xb8\xc6\xb1\xd2\xb5\xb9\x26\x7b\xa6\x25\xed\xe7\x48\xc1\x89\x09\xaf\xd9\x19\x71\xf8\xc8\xd5\x86\x01\xb7\xdd\x83\xf1\x33\xee\xa3\x68\xc4\x64\x14\x59\xec\x59\xa2\x4c\xc2\xac\x68\xcd\x0f\xa2\x1c\x7f\x8d\xbf\x03\x00\x00\xff\xff\x14\x5a\x28\x1e\x5a\x01\x00\x00")

func templatesPasswordChangedDeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPasswordChangedDeHtml,
		"templates/password-changed-de.html",
	)
}

func templatesPasswordChangedDeHtml() (*asset, error) {
	bytes, err := templatesPasswordChangedDeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/password-changed-de.html", size: 346, mode: os.FileMode(420), modTime: time.Unix(1500150852, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPasswordChangedEnHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xc4\x40\x0c\x44\xfb\x7c\xc5\x70\x48\x74\x97\x86\x0a\x51\x52\xd1\x20\x5a\x4a\x6b\xed\x90\x85\x5d\xfb\x14\x3b\x3a\x45\xab\xfc\x3b\x8a\x8e\x03\x84\x52\xee\x68\x3d\xef\x4d\x6b\x60\x19\xb2\x0a\x0e\x91\xa3\xc8\xf1\x44\xee\x67\x9b\xf8\x98\x46\xd2\x77\xe1\x03\xd6\xb5\x7b\xb3\x19\x1f\xb3\x07\xbe\x43\x2c\x36\x4f\xb8\x7e\xc5\x60\xd3\x25\xa1\x94\x6c\xd6\x00\x05\x5a\x43\xff\x64\xf5\x44\xba\xbc\x50\x15\xac\xeb\x4d\xd7\x1a\x44\x79\x2b\xec\xfe\x70\x93\x69\x88\xc6\x3e\xf9\x79\xd8\x9a\xc1\x99\xf5\xee\xf6\xfe\xe1\xf1\xaa\xf0\xcf\x60\x7b\xb9\x94\xa1\xc7\x6b\x11\x72\x41\x1a\x25\x7d\xe2\x3c\x1a\x46\xf2\xcd\x4b\xdc\x11\x76\x39\x93\x4a\xb9\xfc\xc8\xe6\x5a\x85\x33\x85\x94\x05\xa4\xbc\x0f\xd8\x5d\xd4\xe3\x77\xd2\x57\x00\x00\x00\xff\xff\xf6\x5d\x00\x58\x49\x01\x00\x00")

func templatesPasswordChangedEnHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPasswordChangedEnHtml,
		"templates/password-changed-en.html",
	)
}

func templatesPasswordChangedEnHtml() (*asset, error) {
	bytes, err := templatesPasswordChangedEnHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/password-changed-en.html", size: 329, mode: os.FileMode(420), modTime: time.Unix(1500150856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPasswordChangedHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdb\x8e\xdb\xb6\x16\x7d\x9f\xaf\xd8\xa3\xe0\x00\xc9\x81\x69\xc9\x33\x49\x4e\x46\x96\x7c\x92\xa6\x69\x9b\x87\xb6\x41\x9b\x00\x05\x82\x79\xa0\xc9\x6d\x99\x19\x8a\x54\x49\xca\x97\xba\xf9\x97\x7e\x4b\xbf\xac\x20\x25\xdb\xf2\x65\xdc\xdc\x5f\xda\x3c\x8c\xcd\xdb\xe6\xda\x6b\x2f\x2e\xd2\xc9\xce\xb9\x66\x6e\x59\x21\x4c\x5d\x29\x47\x67\x99\xff\x80\x45\x29\x95\xcd\xa3\xa9\x73\x55\x1a\xc7\xf3\xf9\xbc\x3f\xbf\xec\x6b\x53\xc4\x83\xab\xab\xab\x78\xe1\xe7\x44\xcd\xa4\x74\x96\x47\xb5\x51\xa9\x65\x53\x2c\xa9\x25\xa5\x60\x46\x5b\x3d\x71\x84\xe9\x32\x9d\x6d\xe7\xe9\x53\xf3\xf4\x64\x22\x18\xb6\x1f\x91\x47\x81\x94\x8f\xce\x00\x32\x27\x9c\xc4\x51\x16\x37\x9f\xbe\xe7\x9c\x90\xd7\x62\x02\xe7\xa5\xd5\xd7\x23\xdf\x02\x42\xc2\x40\x89\x8e\x82\x87\x4c\xf0\xd7\x5a\xcc\xf2\xe8\x17\xf2\xea\x09\x79\xaa\xcb\x8a\x3a\x31\x96\x18\x01\xd3\xca\xa1\x72\x79\xf4\xfc\x59\x8e\xbc\xf0\x3b\x35\x01\xb3\xf3\xd7\xa8\xb8\x98\x5c\xfb\x50\x87\x81\x9e\x36\xeb\xc8\xcb\x65\xd5\x8d\xe2\x70\xe1\x62\xcf\xc5\x10\xd8\x94\x1a\x8b\x2e\x7f\xf5\xf2\x1b\xf2\x28\x5a\xc7\x50\xb4\xc4\x3c\x9a\x09\x9c\x57\xda\xb8\xce\xca\xb9\xe0\x6e\x9a\x73\x9c\x09\x86\x24\x34\x7a\x20\x94\x70\x82\x4a\x62\x19\x95\x98\x0f\xfa\x89\x0f\x63\xdd\x52\x22\xf8\xfa\xb4\xdb\x31\x6b\x03\xea\x3b\xba\x76\x52\xeb\x1b\xa0\xb0\x82\x8a\x72\x2e\x54\x91\x42\x32\x84\xb7\x67\x00\xfd\x9f\x90\xf2\xef\x6d\xf1\x95\xe6\x4b\x58\x41\xd8\x20\x85\x41\x92\xfc\xa7\x1d\x7f\xb6\x70\x68\x14\x95\x4f\x25\xb5\xf6\x1d\x66\xfc\x17\x56\x20\x85\x42\x32\x45\x51\x4c\x5d\xba\x9d\x38\x6e\xb6\x28\xa9\x29\x84\x0a\x00\xba\x60\xc8\x1c\xc7\x37\xc2\x11\x0f\x9d\x58\xf1\x1b\x12\xca\xdf\xd4\xd6\xad\xb7\x22\xa5\xbd\x75\xcc\x47\x77\x74\x2c\xb1\x07\x8e\xc3\x0a\xc6\xda\x70\x34\x84\x69\x29\x69\x65\x31\x5d\x7f\x19\x42\x69\x35\x09\x33\x89\xb4\x15\x65\x98\x42\x52\xb9\x6e\xb7\xe9\x76\xfb\xb8\xa2\x2c\x36\x11\x03\xd0\x36\x2f\xa0\xb5\xd3\xc3\x9d\x54\x5b\x34\x9e\x6e\xa1\x30\x05\xa5\x15\x0e\x21\x80\xe6\xc8\xb4\xa1\x4e\x68\xb5\xee\xf6\xf9\x08\xe5\xd0\x54\x5a\x86\x01\x52\x6a\x8e\x29\x8c\x05\xab\xc7\x82\x35\x9b\x57\xb0\x02\x2e\x6c\x25\xe9\x32\x85\xb1\xd4\xec\x66\xb8\xe1\x6f\x70\x59\x2d\x9a\x2a\x66\x71\xa8\xfd\xe8\xec\x50\xf0\xa7\x74\xf1\xb8\x44\x2e\x28\x68\x25\x97\x60\x99\x41\x54\x40\x15\x87\xbb\x25\x5d\x34\x42\x4b\xef\x3f\x4a\xaa\xc5\x3d\x58\x9d\x01\x00\x3c\xf6\x88\xd7\x02\xdd\x08\xe1\xf2\x22\xa9\x16\x0d\x58\x80\xc7\xa7\x86\xf7\x70\xee\x9e\xa3\x16\x78\xc0\x7d\x96\x2d\xbc\xbd\x00\x64\x3a\xfd\x31\x1c\xf3\xaf\x35\xab\x4b\x54\xee\x67\x74\x4e\xa8\xc2\x8e\xc2\x6e\x99\x4e\x9f\x48\xa9\xe7\x2f\x7e\xf8\x36\xde\xf4\xbc\x10\x0b\x94\xf6\x05\x9a\xe7\x8a\x4d\x47\x57\x0f\xb3\x78\xbf\xcf\x07\x8e\x6f\x8f\x9c\xc5\x61\xf7\xa3\xf0\xa4\x43\x0f\x11\x06\x83\xeb\x53\xc4\xf6\xdb\x03\x47\x0a\xa3\xeb\x8a\x4c\xc4\xa2\xa5\xb0\xe1\xc4\xab\x04\xce\x45\xe9\x89\xa2\xca\x0d\xf7\xb9\xe9\x6c\x7c\xb4\xa2\x21\x53\x29\xd4\x0d\x4c\x0d\x4e\x1a\xeb\xb5\x69\x1c\x4f\xb4\x72\xb6\x5f\x68\x5d\x48\xa4\x95\xb0\x7d\xa6\x4b\x8f\xe9\xff\x13\x5a\x0a\xb9\xcc\x5f\x8d\x6b\xe5\xea\xf4\x32\x49\x7a\xf7\x93\xa4\xf7\x20\x49\x7a\xff\x4b\x92\x08\x0c\xca\x3c\x0a\xbb\xdb\x29\xa2\x8b\x8e\xa5\x04\x70\x5b\xba\x61\x30\x14\xbf\xc9\x08\x6a\x23\xef\x7e\x1c\xa4\x7b\xc3\x26\xea\x86\x93\x43\xe7\xfd\x00\x55\x0b\x75\x4c\xd5\xfd\xf2\x8d\xf7\x89\xba\x54\xa4\x42\x43\x06\x49\xb2\xd1\xae\xaf\x53\xa7\x4c\x07\x22\x8e\x9b\x9b\x27\xf3\xbe\x16\x30\x72\x31\x1b\x75\x94\x0c\xbf\xc3\xf3\x67\xd7\xa3\x96\xa0\x2c\xf8\x0b\x18\x2d\x31\x8f\x2a\x83\x16\x95\x0b\xe7\x3e\x6a\xcd\x25\x8f\x92\x08\x18\x4a\xd9\xba\xe2\xa6\xed\x1d\x69\xdd\x6e\x6e\x83\xe8\xa1\xaf\x1b\x95\xa2\x50\x79\xc4\xd0\xbb\x48\x04\x01\x56\x7b\x5f\xa4\x0f\x13\x7f\xee\xa2\xd1\xa6\x3a\x99\x33\xdb\x86\x6f\xf2\xf5\x82\xae\x83\xf9\x45\xbe\x66\xc1\x64\x43\xcb\x3b\x63\x67\x06\x31\xb5\xc4\x14\x17\x94\x39\xb9\xdc\xc6\xdf\x29\x0d\x17\xb3\x75\xec\xd6\xab\x92\x6a\xd1\xd8\xe5\xd6\x5a\xd6\x00\x4f\xd0\xf2\x77\x5c\xb4\x7b\xec\xe2\xdd\x96\x6e\x78\xc0\xd0\x96\xe7\x51\xe6\x42\xd5\x3c\x2b\x1d\x2a\x82\x55\x87\x45\x69\xb3\x66\x38\x43\xe3\x04\xa3\xb2\xed\x75\xba\x1a\x72\x61\x90\x05\x27\x97\xce\xec\xb1\xb5\xbe\xd0\xbc\xeb\x41\x9b\xe0\x67\x15\xc4\x7e\x06\x47\xf0\x1e\x15\xc4\x41\xc1\x98\xbf\xbc\xf3\xe8\xf0\x34\x1c\x78\x59\x74\x62\xaf\xf5\x5d\x25\x54\xd0\x4c\x73\x63\xdd\x46\x98\xbf\xc0\x86\x1d\xca\x25\x4e\xdc\x4e\xfd\x3e\x46\x1c\xed\x41\xf1\x81\xde\xa1\xf0\x73\x6d\x38\x99\x1b\x5a\xa5\x63\x83\xf4\x86\xf8\xf6\x2d\xa5\x1d\xf8\xd2\x5e\x3c\xf0\x64\xee\xe9\xeb\x13\x68\xf9\xd6\x87\x4b\x3b\xd0\x2e\x09\x80\xde\x5f\xde\x2d\xb7\x17\xad\x30\xfd\xcb\x86\x4a\x97\x47\x11\x84\x27\xb3\xff\xd2\x9c\xf2\x3c\xf2\xa7\x35\x02\x6b\xd8\xf6\x7a\x61\x9a\x2f\xa7\xba\xb6\xd8\x67\x3a\xe6\x58\xea\x98\xf2\x19\x55\x0c\x39\xb1\x48\x0d\x9b\x92\x89\x36\x65\x2c\xca\x22\x66\x9c\x48\x5d\xe8\xbe\x9d\x15\x7b\xa9\xa5\xe1\xf1\xd3\x66\x63\x28\x17\xb5\x0d\xc9\xac\x85\xd3\x28\x66\xfd\x82\x0a\x93\xf7\xdf\x4f\xa1\xb3\x23\x93\xd6\xba\x82\xbf\x6c\xeb\x7e\xe1\x59\x88\x1d\xf7\x7f\x8c\xff\xd3\x10\x12\x87\x12\x75\x47\x3e\x85\x10\x46\x59\x75\xe8\x46\x03\xef\x9e\x7b\xfe\xd7\x26\xee\x74\xe5\x87\xc1\x6a\x29\x38\xdc\xe1\x9c\xef\xe9\x3e\xae\x8e\xf8\xc6\x09\x79\xdd\xaa\x84\xf7\x37\xd1\x0f\x87\xdd\xbd\x9c\xf6\x79\x5d\xdf\x2f\xc3\x9d\xdb\x66\x18\x8d\xfe\xfc\x63\xa7\x4a\x4d\x75\xba\xe6\xf4\x69\x2b\xb5\x66\xca\x7b\x4d\xb4\xe3\x7c\x1b\x2a\x58\x6d\xac\x36\x8d\x9e\x98\x96\xda\xa4\x77\x92\xf0\xaf\x89\xde\xbc\x5c\xd2\xe6\xe5\xd2\x83\xef\x50\xce\xd0\xdb\x60\x0f\x9e\x18\x41\x65\x0f\x2c\x55\x96\x58\x34\x62\xd2\xf5\xba\x8b\x6a\xb1\x93\xfb\xc5\xc5\x11\xf3\x8b\x46\xab\x15\x38\x2c\x2b\x49\x1d\x42\x14\x4e\x25\xa9\xa8\xb5\x21\x59\x36\xa5\xaa\x40\x1e\x41\x1f\xde\xbe\xcd\xe2\xf0\xda\xf8\x07\xb3\xd3\xfe\x42\xfe\x92\xfc\xfc\x7b\xce\xbf\xc4\x39\x3f\xf0\xea\xd3\xef\xea\x83\xb0\xc7\x9e\x38\x9f\x39\xba\x8f\x71\x96\xc5\xcd\x2f\x81\x2c\xfc\x47\xcf\xe8\xaf\x00\x00\x00\xff\xff\xf1\xef\x1a\xac\x2f\x13\x00\x00")

func templatesPasswordChangedHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPasswordChangedHtml,
		"templates/password-changed.html",
	)
}

func templatesPasswordChangedHtml() (*asset, error) {
	bytes, err := templatesPasswordChangedHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/password-changed.html", size: 4911, mode: os.FileMode(420), modTime: time.Unix(1500150872, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTestEmailTemplateHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x5f\x6e\xe3\x20\x10\xc6\xdf\x7d\x8a\x11\xef\xeb\x59\x29\x0f\x2b\x65\x6d\xa4\xd5\xaa\xbd\x40\x73\x01\xc2\xd0\x42\xcb\x1f\x0b\xa6\x51\xd3\xc8\x77\xaf\x6c\x92\xc6\x89\x9a\xf0\xc4\xcc\x7c\xf3\xe3\x83\xa1\xb3\x1c\xbc\x6c\x1a\x00\x80\xce\x1a\x45\x72\xde\xce\x21\x3b\xf6\x46\x6e\x4c\x61\x78\x08\xca\x79\xf8\x47\x6a\x60\x93\x3b\xac\x95\xa6\x39\x6b\xbd\x8b\x6f\x90\x8d\xef\x45\xe1\xbd\x37\xc5\x1a\xc3\x02\x6c\x36\xcf\xbd\xb0\xcc\x43\x59\x23\x06\xf5\xa1\x29\xb6\xdb\x94\xb8\x70\x56\xc3\x14\xe8\x14\xf0\x3b\x81\xab\x76\xd5\xfe\x41\x5d\xca\x39\xd7\x06\x17\x5b\x5d\x8a\x98\x8e\xab\x36\xb1\xfa\xac\xc1\x36\xd1\x5e\x2e\x8c\x90\xdb\x81\xf6\xaa\x94\x5e\xe8\x14\x59\xb9\x68\xb2\x80\xd9\x54\x2f\x06\x45\xe4\xe2\xcb\x1a\x56\xd9\x04\xf8\xfd\x57\x9c\x6f\x5b\x9b\xfd\xa9\x97\xfc\x2f\x9b\xb2\xfb\x9c\x10\x5e\x48\xb8\xd0\x55\x2d\xcb\xc7\x9c\x42\x87\xc4\xf2\x87\x2a\xc9\xc3\x01\xda\x49\x01\xe3\xd8\x21\xd1\xc2\xe4\x92\xb1\x49\x95\x70\x13\xb1\x49\xf7\x01\x4f\xef\xdb\x57\xa3\xf9\xbe\x8f\xa3\xe8\x36\xe9\xf2\x1d\x90\xfc\x95\xa6\xb3\x19\xe5\xb5\x6e\x5a\x13\xfd\x7f\x8a\x6c\x22\x8f\xe3\x75\x0b\xe0\x72\x34\x48\x6e\x77\x1a\x1b\x1e\xe7\xd6\xe1\xfc\x01\xbf\x02\x00\x00\xff\xff\x42\x00\xc1\x0e\x87\x02\x00\x00")

func templatesTestEmailTemplateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTestEmailTemplateHtml,
		"templates/test-email-template.html",
	)
}

func templatesTestEmailTemplateHtml() (*asset, error) {
	bytes, err := templatesTestEmailTemplateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/test-email-template.html", size: 647, mode: os.FileMode(420), modTime: time.Unix(1498505148, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/confirm-de.html": templatesConfirmDeHtml,
	"templates/confirm-en.html": templatesConfirmEnHtml,
	"templates/confirm.html": templatesConfirmHtml,
	"templates/forgot-password-de.html": templatesForgotPasswordDeHtml,
	"templates/forgot-password-en.html": templatesForgotPasswordEnHtml,
	"templates/forgot-password.html": templatesForgotPasswordHtml,
	"templates/password-changed-de.html": templatesPasswordChangedDeHtml,
	"templates/password-changed-en.html": templatesPasswordChangedEnHtml,
	"templates/password-changed.html": templatesPasswordChangedHtml,
	"templates/test-email-template.html": templatesTestEmailTemplateHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"confirm-de.html": &bintree{templatesConfirmDeHtml, map[string]*bintree{}},
		"confirm-en.html": &bintree{templatesConfirmEnHtml, map[string]*bintree{}},
		"confirm.html": &bintree{templatesConfirmHtml, map[string]*bintree{}},
		"forgot-password-de.html": &bintree{templatesForgotPasswordDeHtml, map[string]*bintree{}},
		"forgot-password-en.html": &bintree{templatesForgotPasswordEnHtml, map[string]*bintree{}},
		"forgot-password.html": &bintree{templatesForgotPasswordHtml, map[string]*bintree{}},
		"password-changed-de.html": &bintree{templatesPasswordChangedDeHtml, map[string]*bintree{}},
		"password-changed-en.html": &bintree{templatesPasswordChangedEnHtml, map[string]*bintree{}},
		"password-changed.html": &bintree{templatesPasswordChangedHtml, map[string]*bintree{}},
		"test-email-template.html": &bintree{templatesTestEmailTemplateHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

