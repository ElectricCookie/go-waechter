// Code generated by go-bindata.
// sources:
// testEmail/test-email-template.html
// DO NOT EDIT!

package testEmail

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testemailTestEmailTemplateHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xdd\x4e\xc3\x30\x0c\x85\xef\xf7\x14\x56\xee\xa9\x91\x76\x81\x34\xda\x48\x08\xc1\x0b\xb0\x17\xc8\xe2\x40\x02\xf9\xa9\x12\x33\x31\xa6\xbe\x3b\x6a\xb3\x7f\x60\x77\x39\xf6\xf1\xd7\x53\xd9\xad\xe5\xe0\xe5\x6c\x06\x00\xd0\x5a\xa3\x48\x4e\xcf\x49\xb2\x63\x6f\xe4\xd2\x14\x86\xa7\xa0\x9c\x87\x07\x52\x3d\x9b\xdc\x62\xed\x1c\x9d\xde\xc5\x0f\xc8\xc6\x77\xa2\xf0\xc6\x9b\x62\x8d\x61\x01\x36\x9b\xd7\x4e\x58\xe6\xbe\x2c\x10\x83\xfa\xd2\x14\x9b\x55\x4a\x5c\x38\xab\x7e\x14\x3a\x05\x3c\x14\x70\xde\xcc\x9b\x3b\xd4\xa5\x1c\x6b\x4d\x70\xb1\xd1\xa5\x88\xfa\xb1\x16\x6b\xc4\x2a\x56\x89\x36\xbb\xf7\xa4\xc9\xad\x41\x7b\x55\x4a\x27\x74\x8a\xac\x5c\x34\x59\xc0\x94\xa8\x13\xbd\x22\x72\xf1\x6d\x01\xf3\x6c\x02\xdc\xde\x8b\x63\xfc\x3a\xec\xf7\xb3\xe4\x6f\x6c\xca\xee\x7b\x44\x78\x21\xe1\xcc\x57\xbd\x2c\x9f\x73\x0a\x2d\x12\xcb\x3f\xba\x24\xb7\x5b\x68\x46\x07\x0c\x43\x8b\x44\x27\x21\x4f\x19\xcb\x54\x09\xff\x22\x96\xe9\x3a\xe0\xe5\x73\xf5\x6e\x34\x5f\xcf\xb1\x33\x1d\x48\x67\x1e\x24\x7f\x51\xb1\x19\x25\xc0\xef\x9f\x1e\x51\x8f\x29\xb2\x89\x3c\x0c\x97\x23\x80\x27\xc7\x80\xe4\xd6\xfb\x15\xe1\x6e\x47\x2d\x4e\x77\xf6\x13\x00\x00\xff\xff\xa7\xc2\xb9\xb9\x6e\x02\x00\x00")

func testemailTestEmailTemplateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_testemailTestEmailTemplateHtml,
		"testEmail/test-email-template.html",
	)
}

func testemailTestEmailTemplateHtml() (*asset, error) {
	bytes, err := testemailTestEmailTemplateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testEmail/test-email-template.html", size: 622, mode: os.FileMode(420), modTime: time.Unix(1501969216, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"testEmail/test-email-template.html": testemailTestEmailTemplateHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"testEmail": &bintree{nil, map[string]*bintree{
		"test-email-template.html": &bintree{testemailTestEmailTemplateHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

